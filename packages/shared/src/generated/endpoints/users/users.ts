/**
 * // üöÄ Auto-generated by Orval (Axios + React Query)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * // üîê Uses custom Axios instance with auth & error handling
 * 
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetUserStatsApiV1UsersStatsDashboardGet200,
  GetUsersApiV1UsersGetParams,
  HTTPValidationError,
  ResetUserPasswordApiV1UsersUserIdResetPasswordPost200,
  ResetUserPasswordApiV1UsersUserIdResetPasswordPostParams,
  User,
  UserAdminCreate,
  UserAdminUpdate,
  UserListResponse,
  UserUpdate
} from '../../schemas';

import { mutator } from '../../../../../../apps/web/src/lib/api';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Get current user information.

Returns the profile information of the authenticated user.
 * @summary Get Current User
 */
export const Get_current_user_api_v1_users_me_get = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<User>(
      {url: `http://localhost:8000/api/v1/users/me`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCurrentUserApiV1UsersMeGetQueryKey = () => {
    return [`http://localhost:8000/api/v1/users/me`] as const;
    }

    
export const getGetCurrentUserApiV1UsersMeGetQueryOptions = <TData = Awaited<ReturnType<typeof Get_current_user_api_v1_users_me_get>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_current_user_api_v1_users_me_get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserApiV1UsersMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof Get_current_user_api_v1_users_me_get>>> = ({ signal }) => Get_current_user_api_v1_users_me_get(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof Get_current_user_api_v1_users_me_get>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCurrentUserApiV1UsersMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof Get_current_user_api_v1_users_me_get>>>
export type GetCurrentUserApiV1UsersMeGetQueryError = unknown


/**
 * @summary Get Current User
 */

export function useGetCurrentUserApiV1UsersMeGet<TData = Awaited<ReturnType<typeof Get_current_user_api_v1_users_me_get>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_current_user_api_v1_users_me_get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCurrentUserApiV1UsersMeGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update current user information.

Allows users to update their own profile information.
 * @summary Update Current User
 */
export const Update_current_user_api_v1_users_me_put = (
    userUpdate: UserUpdate,
 options?: SecondParameter<typeof mutator>,) => {
      
      
      return mutator<User>(
      {url: `http://localhost:8000/api/v1/users/me`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      options);
    }
  


export const getUpdateCurrentUserApiV1UsersMePutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Update_current_user_api_v1_users_me_put>>, TError,{data: UserUpdate}, TContext>, request?: SecondParameter<typeof mutator>}
): UseMutationOptions<Awaited<ReturnType<typeof Update_current_user_api_v1_users_me_put>>, TError,{data: UserUpdate}, TContext> => {

const mutationKey = ['updateCurrentUserApiV1UsersMePut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Update_current_user_api_v1_users_me_put>>, {data: UserUpdate}> = (props) => {
          const {data} = props ?? {};

          return  Update_current_user_api_v1_users_me_put(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCurrentUserApiV1UsersMePutMutationResult = NonNullable<Awaited<ReturnType<typeof Update_current_user_api_v1_users_me_put>>>
    export type UpdateCurrentUserApiV1UsersMePutMutationBody = UserUpdate
    export type UpdateCurrentUserApiV1UsersMePutMutationError = HTTPValidationError

    /**
 * @summary Update Current User
 */
export const useUpdateCurrentUserApiV1UsersMePut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Update_current_user_api_v1_users_me_put>>, TError,{data: UserUpdate}, TContext>, request?: SecondParameter<typeof mutator>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Update_current_user_api_v1_users_me_put>>,
        TError,
        {data: UserUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateCurrentUserApiV1UsersMePutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get paginated list of users with optional filtering.

Requires admin privileges (MLGOO-DILG role).
 * @summary Get Users
 */
export const Get_users_api_v1_users__get = (
    params?: GetUsersApiV1UsersGetParams,
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<UserListResponse>(
      {url: `http://localhost:8000/api/v1/users/`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetUsersApiV1UsersGetQueryKey = (params?: GetUsersApiV1UsersGetParams,) => {
    return [`http://localhost:8000/api/v1/users/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUsersApiV1UsersGetQueryOptions = <TData = Awaited<ReturnType<typeof Get_users_api_v1_users__get>>, TError = HTTPValidationError>(params?: GetUsersApiV1UsersGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_users_api_v1_users__get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersApiV1UsersGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof Get_users_api_v1_users__get>>> = ({ signal }) => Get_users_api_v1_users__get(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof Get_users_api_v1_users__get>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersApiV1UsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof Get_users_api_v1_users__get>>>
export type GetUsersApiV1UsersGetQueryError = HTTPValidationError


/**
 * @summary Get Users
 */

export function useGetUsersApiV1UsersGet<TData = Awaited<ReturnType<typeof Get_users_api_v1_users__get>>, TError = HTTPValidationError>(
 params?: GetUsersApiV1UsersGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_users_api_v1_users__get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersApiV1UsersGetQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new user.

Requires admin privileges (MLGOO-DILG role).
 * @summary Create User
 */
export const Create_user_api_v1_users__post = (
    userAdminCreate: UserAdminCreate,
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<User>(
      {url: `http://localhost:8000/api/v1/users/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userAdminCreate, signal
    },
      options);
    }
  


export const getCreateUserApiV1UsersPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Create_user_api_v1_users__post>>, TError,{data: UserAdminCreate}, TContext>, request?: SecondParameter<typeof mutator>}
): UseMutationOptions<Awaited<ReturnType<typeof Create_user_api_v1_users__post>>, TError,{data: UserAdminCreate}, TContext> => {

const mutationKey = ['createUserApiV1UsersPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Create_user_api_v1_users__post>>, {data: UserAdminCreate}> = (props) => {
          const {data} = props ?? {};

          return  Create_user_api_v1_users__post(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserApiV1UsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof Create_user_api_v1_users__post>>>
    export type CreateUserApiV1UsersPostMutationBody = UserAdminCreate
    export type CreateUserApiV1UsersPostMutationError = HTTPValidationError

    /**
 * @summary Create User
 */
export const useCreateUserApiV1UsersPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Create_user_api_v1_users__post>>, TError,{data: UserAdminCreate}, TContext>, request?: SecondParameter<typeof mutator>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Create_user_api_v1_users__post>>,
        TError,
        {data: UserAdminCreate},
        TContext
      > => {

      const mutationOptions = getCreateUserApiV1UsersPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get user by ID.

Requires admin privileges (MLGOO-DILG role).
 * @summary Get User
 */
export const Get_user_api_v1_users__user_id__get = (
    userId: string,
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<User>(
      {url: `http://localhost:8000/api/v1/users/${userId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserApiV1UsersUserIdGetQueryKey = (userId: string,) => {
    return [`http://localhost:8000/api/v1/users/${userId}`] as const;
    }

    
export const getGetUserApiV1UsersUserIdGetQueryOptions = <TData = Awaited<ReturnType<typeof Get_user_api_v1_users__user_id__get>>, TError = HTTPValidationError>(userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_user_api_v1_users__user_id__get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserApiV1UsersUserIdGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof Get_user_api_v1_users__user_id__get>>> = ({ signal }) => Get_user_api_v1_users__user_id__get(userId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof Get_user_api_v1_users__user_id__get>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserApiV1UsersUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof Get_user_api_v1_users__user_id__get>>>
export type GetUserApiV1UsersUserIdGetQueryError = HTTPValidationError


/**
 * @summary Get User
 */

export function useGetUserApiV1UsersUserIdGet<TData = Awaited<ReturnType<typeof Get_user_api_v1_users__user_id__get>>, TError = HTTPValidationError>(
 userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_user_api_v1_users__user_id__get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserApiV1UsersUserIdGetQueryOptions(userId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update user by ID.

Requires admin privileges (MLGOO-DILG role).
 * @summary Update User
 */
export const Update_user_api_v1_users__user_id__put = (
    userId: string,
    userAdminUpdate: UserAdminUpdate,
 options?: SecondParameter<typeof mutator>,) => {
      
      
      return mutator<User>(
      {url: `http://localhost:8000/api/v1/users/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userAdminUpdate
    },
      options);
    }
  


export const getUpdateUserApiV1UsersUserIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Update_user_api_v1_users__user_id__put>>, TError,{userId: string;data: UserAdminUpdate}, TContext>, request?: SecondParameter<typeof mutator>}
): UseMutationOptions<Awaited<ReturnType<typeof Update_user_api_v1_users__user_id__put>>, TError,{userId: string;data: UserAdminUpdate}, TContext> => {

const mutationKey = ['updateUserApiV1UsersUserIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Update_user_api_v1_users__user_id__put>>, {userId: string;data: UserAdminUpdate}> = (props) => {
          const {userId,data} = props ?? {};

          return  Update_user_api_v1_users__user_id__put(userId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserApiV1UsersUserIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof Update_user_api_v1_users__user_id__put>>>
    export type UpdateUserApiV1UsersUserIdPutMutationBody = UserAdminUpdate
    export type UpdateUserApiV1UsersUserIdPutMutationError = HTTPValidationError

    /**
 * @summary Update User
 */
export const useUpdateUserApiV1UsersUserIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Update_user_api_v1_users__user_id__put>>, TError,{userId: string;data: UserAdminUpdate}, TContext>, request?: SecondParameter<typeof mutator>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Update_user_api_v1_users__user_id__put>>,
        TError,
        {userId: string;data: UserAdminUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateUserApiV1UsersUserIdPutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Deactivate user by ID (soft delete).

Requires admin privileges (MLGOO-DILG role).
 * @summary Deactivate User
 */
export const Deactivate_user_api_v1_users__user_id__delete = (
    userId: string,
 options?: SecondParameter<typeof mutator>,) => {
      
      
      return mutator<User>(
      {url: `http://localhost:8000/api/v1/users/${userId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeactivateUserApiV1UsersUserIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Deactivate_user_api_v1_users__user_id__delete>>, TError,{userId: string}, TContext>, request?: SecondParameter<typeof mutator>}
): UseMutationOptions<Awaited<ReturnType<typeof Deactivate_user_api_v1_users__user_id__delete>>, TError,{userId: string}, TContext> => {

const mutationKey = ['deactivateUserApiV1UsersUserIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Deactivate_user_api_v1_users__user_id__delete>>, {userId: string}> = (props) => {
          const {userId} = props ?? {};

          return  Deactivate_user_api_v1_users__user_id__delete(userId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeactivateUserApiV1UsersUserIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof Deactivate_user_api_v1_users__user_id__delete>>>
    
    export type DeactivateUserApiV1UsersUserIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Deactivate User
 */
export const useDeactivateUserApiV1UsersUserIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Deactivate_user_api_v1_users__user_id__delete>>, TError,{userId: string}, TContext>, request?: SecondParameter<typeof mutator>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Deactivate_user_api_v1_users__user_id__delete>>,
        TError,
        {userId: string},
        TContext
      > => {

      const mutationOptions = getDeactivateUserApiV1UsersUserIdDeleteMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Activate user by ID.

Requires admin privileges (MLGOO-DILG role).
 * @summary Activate User
 */
export const Activate_user_api_v1_users__user_id__activate_post = (
    userId: string,
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<User>(
      {url: `http://localhost:8000/api/v1/users/${userId}/activate`, method: 'POST', signal
    },
      options);
    }
  


export const getActivateUserApiV1UsersUserIdActivatePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Activate_user_api_v1_users__user_id__activate_post>>, TError,{userId: string}, TContext>, request?: SecondParameter<typeof mutator>}
): UseMutationOptions<Awaited<ReturnType<typeof Activate_user_api_v1_users__user_id__activate_post>>, TError,{userId: string}, TContext> => {

const mutationKey = ['activateUserApiV1UsersUserIdActivatePost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Activate_user_api_v1_users__user_id__activate_post>>, {userId: string}> = (props) => {
          const {userId} = props ?? {};

          return  Activate_user_api_v1_users__user_id__activate_post(userId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ActivateUserApiV1UsersUserIdActivatePostMutationResult = NonNullable<Awaited<ReturnType<typeof Activate_user_api_v1_users__user_id__activate_post>>>
    
    export type ActivateUserApiV1UsersUserIdActivatePostMutationError = HTTPValidationError

    /**
 * @summary Activate User
 */
export const useActivateUserApiV1UsersUserIdActivatePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Activate_user_api_v1_users__user_id__activate_post>>, TError,{userId: string}, TContext>, request?: SecondParameter<typeof mutator>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Activate_user_api_v1_users__user_id__activate_post>>,
        TError,
        {userId: string},
        TContext
      > => {

      const mutationOptions = getActivateUserApiV1UsersUserIdActivatePostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Reset user password.

Requires admin privileges (MLGOO-DILG role).
Sets must_change_password to True.
 * @summary Reset User Password
 */
export const Reset_user_password_api_v1_users__user_id__reset_password_post = (
    userId: string,
    params: ResetUserPasswordApiV1UsersUserIdResetPasswordPostParams,
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<ResetUserPasswordApiV1UsersUserIdResetPasswordPost200>(
      {url: `http://localhost:8000/api/v1/users/${userId}/reset-password`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getResetUserPasswordApiV1UsersUserIdResetPasswordPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Reset_user_password_api_v1_users__user_id__reset_password_post>>, TError,{userId: string;params: ResetUserPasswordApiV1UsersUserIdResetPasswordPostParams}, TContext>, request?: SecondParameter<typeof mutator>}
): UseMutationOptions<Awaited<ReturnType<typeof Reset_user_password_api_v1_users__user_id__reset_password_post>>, TError,{userId: string;params: ResetUserPasswordApiV1UsersUserIdResetPasswordPostParams}, TContext> => {

const mutationKey = ['resetUserPasswordApiV1UsersUserIdResetPasswordPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Reset_user_password_api_v1_users__user_id__reset_password_post>>, {userId: string;params: ResetUserPasswordApiV1UsersUserIdResetPasswordPostParams}> = (props) => {
          const {userId,params} = props ?? {};

          return  Reset_user_password_api_v1_users__user_id__reset_password_post(userId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetUserPasswordApiV1UsersUserIdResetPasswordPostMutationResult = NonNullable<Awaited<ReturnType<typeof Reset_user_password_api_v1_users__user_id__reset_password_post>>>
    
    export type ResetUserPasswordApiV1UsersUserIdResetPasswordPostMutationError = HTTPValidationError

    /**
 * @summary Reset User Password
 */
export const useResetUserPasswordApiV1UsersUserIdResetPasswordPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Reset_user_password_api_v1_users__user_id__reset_password_post>>, TError,{userId: string;params: ResetUserPasswordApiV1UsersUserIdResetPasswordPostParams}, TContext>, request?: SecondParameter<typeof mutator>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Reset_user_password_api_v1_users__user_id__reset_password_post>>,
        TError,
        {userId: string;params: ResetUserPasswordApiV1UsersUserIdResetPasswordPostParams},
        TContext
      > => {

      const mutationOptions = getResetUserPasswordApiV1UsersUserIdResetPasswordPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Get user statistics for admin dashboard.

Requires admin privileges (MLGOO-DILG role).
 * @summary Get User Stats
 */
export const Get_user_stats_api_v1_users_stats_dashboard_get = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<GetUserStatsApiV1UsersStatsDashboardGet200>(
      {url: `http://localhost:8000/api/v1/users/stats/dashboard`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserStatsApiV1UsersStatsDashboardGetQueryKey = () => {
    return [`http://localhost:8000/api/v1/users/stats/dashboard`] as const;
    }

    
export const getGetUserStatsApiV1UsersStatsDashboardGetQueryOptions = <TData = Awaited<ReturnType<typeof Get_user_stats_api_v1_users_stats_dashboard_get>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_user_stats_api_v1_users_stats_dashboard_get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserStatsApiV1UsersStatsDashboardGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof Get_user_stats_api_v1_users_stats_dashboard_get>>> = ({ signal }) => Get_user_stats_api_v1_users_stats_dashboard_get(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof Get_user_stats_api_v1_users_stats_dashboard_get>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserStatsApiV1UsersStatsDashboardGetQueryResult = NonNullable<Awaited<ReturnType<typeof Get_user_stats_api_v1_users_stats_dashboard_get>>>
export type GetUserStatsApiV1UsersStatsDashboardGetQueryError = unknown


/**
 * @summary Get User Stats
 */

export function useGetUserStatsApiV1UsersStatsDashboardGet<TData = Awaited<ReturnType<typeof Get_user_stats_api_v1_users_stats_dashboard_get>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_user_stats_api_v1_users_stats_dashboard_get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserStatsApiV1UsersStatsDashboardGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



